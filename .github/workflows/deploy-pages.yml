name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --ignore-scripts
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      - name: Create static build
        run: |
          mkdir -p dist
          # Copy main HTML files to dist directory
          cp -f index.html dist/ 2>/dev/null || echo "index.html not found"
          cp -f login.html dist/ 2>/dev/null || echo "login.html not found"
          cp -f demo.html dist/ 2>/dev/null || echo "demo.html not found"
          cp -f demo-*.html dist/ 2>/dev/null || echo "demo html files not found"
          cp -f header-demo.html dist/ 2>/dev/null || echo "header-demo.html not found"
          cp -f telehealth*.html dist/ 2>/dev/null || echo "telehealth html files not found"
          cp -f whisper-*.html dist/ 2>/dev/null || echo "whisper html files not found"
          cp -f ottehr-*.html dist/ 2>/dev/null || echo "ottehr html files not found"
          
          # Copy directory structures with demos
          if [ -d "demo" ]; then
            cp -r demo dist/
            echo "Copied demo directory"
          fi
          
          if [ -d "provider" ]; then
            cp -r provider dist/
            echo "Copied provider directory"
          fi
          
          if [ -d "patient-portal" ]; then
            cp -r patient-portal dist/
            echo "Copied patient-portal directory"
          fi
          
          if [ -d "auth" ]; then
            cp -r auth dist/
            echo "Copied auth directory"
          fi
          
          if [ -d "modules" ]; then
            cp -r modules dist/
            echo "Copied modules directory"
          fi
          
          if [ -d "admin-console" ]; then
            cp -r admin-console dist/
            echo "Copied admin-console directory"
          fi
          
          # Copy any CSS or JS files that might be in root
          find . -maxdepth 1 -name "*.css" -exec cp {} dist/ \; 2>/dev/null || echo "No CSS files found"
          find . -maxdepth 1 -name "*.js" ! -name "server.js" ! -name "lambda*.js" ! -name "*test*" -exec cp {} dist/ \; 2>/dev/null || echo "No standalone JS files found"
          
          # Create a simple server.js replacement for GitHub Pages (static only)
          cat > dist/api-mock.js << 'EOF'
          // Mock API endpoints for GitHub Pages static deployment
          window.mockAPI = {
            '/health': {
              status: 'healthy',
              fhir: 'connected',
              timestamp: new Date().toISOString()
            },
            '/dev/token': {
              access_token: 'demo-token-' + Math.random().toString(36).substr(2, 9)
            },
            '/fhir/Patient': {
              entry: [{
                resource: {
                  id: 'demo-patient-1',
                  name: [{
                    given: ['John'],
                    family: 'Doe'
                  }],
                  birthDate: '1980-01-15',
                  gender: 'male',
                  telecom: [{
                    system: 'email',
                    value: 'john.doe@example.com'
                  }],
                  identifier: [{
                    value: 'P001234567'
                  }]
                }
              }]
            },
            '/fhir/Appointment': {
              entry: [{
                resource: {
                  id: 'demo-appointment-1',
                  status: 'booked',
                  start: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),
                  description: 'Annual Physical Examination',
                  participant: [{
                    actor: {
                      display: 'Dr. Sarah Johnson'
                    }
                  }]
                }
              }]
            }
          };
          
          // Override fetch for demo endpoints
          const originalFetch = window.fetch;
          window.fetch = function(url, options) {
            // Handle relative URLs
            const fullUrl = url.startsWith('/') ? url : '/' + url;
            
            if (window.mockAPI[fullUrl]) {
              return Promise.resolve({
                ok: true,
                json: () => Promise.resolve(window.mockAPI[fullUrl])
              });
            }
            
            // For other URLs, try original fetch but handle errors gracefully
            return originalFetch.apply(this, arguments).catch(error => {
              console.warn('Fetch failed, using mock data:', error);
              return {
                ok: false,
                json: () => Promise.resolve({error: 'Service unavailable in demo mode'})
              };
            });
          };

          // Set up demo authentication for GitHub Pages
          if (typeof localStorage !== 'undefined') {
            localStorage.setItem('authToken', 'demo-token-12345');
            localStorage.setItem('user', JSON.stringify({
              id: 'demo-user-1',
              name: 'Demo User',
              email: 'demo@webqx.com',
              accountStatus: 'Active'
            }));
          }

          // GitHub Pages specific: Handle routing for login
          if (window.location.pathname === '/login' || window.location.pathname === '/webqx/login') {
            window.location.href = window.location.href.replace(/\/login$/, '/login.html');
          }
          EOF

          # Create redirect HTML for /login route
          cat > dist/404.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset="utf-8">
            <title>WebQX Healthcare Platform</title>
            <script>
              // GitHub Pages redirect handler
              var path = window.location.pathname;
              var query = window.location.search;
              var hash = window.location.hash;
              
              console.log('404 handler - current path:', path);
              
              // Handle common routes
              if (path === '/login' || path === '/webqx/login') {
                var newUrl = window.location.origin + '/webqx/login.html' + query + hash;
                console.log('Redirecting to:', newUrl);
                window.location.replace(newUrl);
              } else if (path === '/webqx' || path === '/webqx/') {
                var newUrl = window.location.origin + '/webqx/index.html' + query + hash;
                console.log('Redirecting to:', newUrl);
                window.location.replace(newUrl);
              } else if (path.endsWith('/')) {
                // Try adding index.html
                var newUrl = window.location.href + 'index.html';
                console.log('Trying:', newUrl);
                window.location.replace(newUrl);
              } else if (!path.includes('.')) {
                // Try adding .html extension
                var newUrl = window.location.href + '.html';
                console.log('Trying:', newUrl);
                window.location.replace(newUrl);
              } else {
                // Show a proper 404 page
                document.body.innerHTML = `
                  <div style="text-align: center; padding: 50px; font-family: Arial, sans-serif;">
                    <h1>üè• WebQX Healthcare Platform</h1>
                    <h2>Page Not Found (404)</h2>
                    <p>The page you're looking for doesn't exist.</p>
                    <p><a href="/webqx/" style="color: #007bff; text-decoration: none;">‚Üê Return to Main Portal</a></p>
                    <p><a href="/webqx/login.html" style="color: #007bff; text-decoration: none;">üîí Login Page</a></p>
                  </div>
                `;
              }
            </script>
          </head>
          <body>
            <div style="text-align: center; padding: 50px; font-family: Arial, sans-serif;">
              <h1>üè• WebQX Healthcare Platform</h1>
              <p>Redirecting...</p>
              <noscript>
                <p>Please enable JavaScript or visit:</p>
                <p><a href="/webqx/">Main Portal</a> | <a href="/webqx/login.html">Login</a></p>
              </noscript>
            </div>
          </body>
          </html>
          EOF
          
          # Update HTML files to include mock API for GitHub Pages
          for file in dist/*.html; do
            if [ -f "$file" ]; then
              sed -i 's|</head>|<script src="api-mock.js"></script></head>|g' "$file"
            fi
          done
          
          # Create a README for the GitHub Pages deployment
          cat > dist/README.md << 'EOF'
          # WebQX Healthcare Platform - GitHub Pages Demo
          
          This is a static demo deployment of the WebQX Healthcare Platform.
          
          ## Available Demos:
          - [Main Patient Portal](index.html)
          - [Login Demo](login.html)
          - [Telehealth Demo](telehealth-demo.html)
          - [Whisper Demo](whisper-demo.html)
          - [FHIR Appointment Booking](demo-fhir-r4-appointment-booking.html)
          - [Lab Results Viewer](demo-lab-results-viewer.html)
          
          Note: This is a static demo with mock data for demonstration purposes.
          EOF
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
