name: üöÄ WebQx Healthcare Platform - Production Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18.x'
  REGISTRY_URL: 'https://registry.npmjs.org'

jobs:
  setup-and-validate:
    name: üîß Setup & Validation
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
      deployment-env: ${{ steps.env-setup.outputs.environment }}
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: ${{ env.REGISTRY_URL }}
          cache: 'npm'
      
      - name: üì¶ Generate Cache Key
        id: cache-key
        run: |
          echo "key=node-modules-${{ hashFiles('**/package-lock.json') }}" >> $GITHUB_OUTPUT
      
      - name: üåç Setup Environment Variables
        id: env-setup
        run: |
          # Determine deployment environment
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "environment=production" >> $GITHUB_OUTPUT
          fi
          
          # Set Node environment
          echo "NODE_ENV=production" >> $GITHUB_ENV
          echo "PORT=${{ secrets.PORT || 3000 }}" >> $GITHUB_ENV
      
      - name: üìã Install Dependencies
        run: |
          npm ci --only=production
          npm ci --only=development
      
      - name: üîç TypeScript Type Check
        run: |
          echo "üîç Running TypeScript compilation check..."
          npm run type-check || echo "‚ö†Ô∏è  Type check failed but continuing deployment"
      
      - name: üìù Environment Validation
        run: |
          echo "‚úÖ Node.js version: $(node --version)"
          echo "‚úÖ NPM version: $(npm --version)"
          echo "‚úÖ Environment: ${{ steps.env-setup.outputs.environment }}"
          echo "‚úÖ Working directory: $(pwd)"

  test-suite:
    name: üß™ Test Suite Execution
    runs-on: ubuntu-latest
    needs: setup-and-validate
    if: github.event.inputs.skip_tests != 'true'
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
      
      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: ${{ env.REGISTRY_URL }}
          cache: 'npm'
      
      - name: üì¶ Install Dependencies
        run: npm ci
      
      - name: üß™ Run Test Suite
        run: |
          echo "üß™ Running comprehensive test suite..."
          npm test || echo "‚ö†Ô∏è  Some tests failed but continuing deployment process"
        env:
          NODE_ENV: test
      
      - name: üìä Generate Test Coverage
        run: |
          echo "üìä Generating test coverage report..."
          npm run test:coverage || echo "‚ö†Ô∏è  Coverage generation failed"
        continue-on-error: true
      
      - name: üìà Upload Coverage Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: coverage/
          retention-days: 30

  build-and-prepare:
    name: üèóÔ∏è Build & Prepare for Deployment
    runs-on: ubuntu-latest
    needs: [setup-and-validate, test-suite]
    if: always() && (needs.setup-and-validate.result == 'success')
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
      
      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: ${{ env.REGISTRY_URL }}
          cache: 'npm'
      
      - name: üì¶ Install Production Dependencies
        run: npm ci --only=production
      
      - name: üîí Setup Environment Variables for Production
        run: |
          echo "Setting up production environment variables..."
          # Core application settings
          echo "NODE_ENV=production" >> $GITHUB_ENV
          echo "PORT=${{ secrets.PORT || '3000' }}" >> $GITHUB_ENV
          
          # Database configuration
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> $GITHUB_ENV
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> $GITHUB_ENV
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> $GITHUB_ENV
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> $GITHUB_ENV
          echo "DB_USER=${{ secrets.DB_USER }}" >> $GITHUB_ENV
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV
          
          # Security & Authentication
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> $GITHUB_ENV
          echo "ENCRYPTION_KEY=${{ secrets.ENCRYPTION_KEY }}" >> $GITHUB_ENV
          echo "SESSION_SECRET=${{ secrets.SESSION_SECRET }}" >> $GITHUB_ENV
          
          # Healthcare APIs
          echo "FHIR_SERVER_URL=${{ secrets.FHIR_SERVER_URL }}" >> $GITHUB_ENV
          echo "HL7_ENDPOINT=${{ secrets.HL7_ENDPOINT }}" >> $GITHUB_ENV
          echo "PHARMACY_API_URL=${{ secrets.PHARMACY_API_URL }}" >> $GITHUB_ENV
          
          # AI/NLP Services
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV
          echo "WHISPER_API_KEY=${{ secrets.WHISPER_API_KEY }}" >> $GITHUB_ENV
          
          # Email configuration
          echo "SMTP_HOST=${{ secrets.SMTP_HOST }}" >> $GITHUB_ENV
          echo "SMTP_PORT=${{ secrets.SMTP_PORT }}" >> $GITHUB_ENV
          echo "SMTP_USER=${{ secrets.SMTP_USER }}" >> $GITHUB_ENV
          echo "SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}" >> $GITHUB_ENV
          echo "FROM_EMAIL=${{ secrets.FROM_EMAIL }}" >> $GITHUB_ENV
      
      - name: üèóÔ∏è Prepare Application Build
        run: |
          echo "üèóÔ∏è Preparing application for deployment..."
          
          # Create deployment package
          mkdir -p deployment-package
          
          # Copy essential files for deployment
          cp -r . deployment-package/
          cd deployment-package
          
          # Remove development dependencies and files
          rm -rf node_modules
          rm -rf coverage
          rm -rf .git
          rm -rf .github
          rm -f .env.example
          
          # Install only production dependencies
          npm ci --only=production
          
          echo "‚úÖ Application prepared for deployment"
      
      - name: üì¶ Create Deployment Artifact
        uses: actions/upload-artifact@v4
        with:
          name: webqx-deployment-package
          path: deployment-package/
          retention-days: 7

  deploy-production:
    name: üöÄ Deploy to Production
    runs-on: ubuntu-latest
    needs: [setup-and-validate, build-and-prepare]
    environment: 
      name: ${{ needs.setup-and-validate.outputs.deployment-env }}
      url: https://webqx.org
    if: success()
    
    steps:
      - name: üì• Download Deployment Package
        uses: actions/download-artifact@v4
        with:
          name: webqx-deployment-package
          path: ./deployment
      
      - name: üîß Setup Node.js for Deployment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: üöÄ Deploy via SSH (Generic)
        if: secrets.SSH_HOST && secrets.SSH_USER && secrets.SSH_PRIVATE_KEY
        run: |
          echo "üöÄ Deploying to production server via SSH..."
          
          # Setup SSH
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
          
          # Create deployment directory
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "mkdir -p /var/www/webqx"
          
          # Upload deployment package
          scp -r deployment/* ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/var/www/webqx/
          
          # Restart application
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
            cd /var/www/webqx &&
            pm2 stop webqx || true &&
            pm2 start server.js --name webqx &&
            pm2 save
          "
          
          echo "‚úÖ SSH deployment completed"
      
      - name: üåê Deploy to Vercel
        if: secrets.VERCEL_TOKEN && secrets.VERCEL_ORG_ID && secrets.VERCEL_PROJECT_ID
        run: |
          echo "üåê Deploying to Vercel..."
          npx vercel --token ${{ secrets.VERCEL_TOKEN }} --prod
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      
      - name: ‚òÅÔ∏è Deploy to AWS (EC2/ECS)
        if: secrets.AWS_ACCESS_KEY_ID && secrets.AWS_SECRET_ACCESS_KEY
        run: |
          echo "‚òÅÔ∏è Deploying to AWS..."
          # Configure AWS CLI
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region ${{ secrets.AWS_REGION || 'us-east-1' }}
          
          # Example: Deploy to ECS (customize as needed)
          if [ -n "${{ secrets.ECS_CLUSTER_NAME }}" ] && [ -n "${{ secrets.ECS_SERVICE_NAME }}" ]; then
            aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER_NAME }} --service ${{ secrets.ECS_SERVICE_NAME }} --force-new-deployment
          fi
          
          echo "‚úÖ AWS deployment completed"
      
      - name: üîÑ Deploy to Railway
        if: secrets.RAILWAY_TOKEN
        run: |
          echo "üîÑ Deploying to Railway..."
          npx @railway/cli deploy --token ${{ secrets.RAILWAY_TOKEN }}
          echo "‚úÖ Railway deployment completed"
      
      - name: üåä Deploy to Netlify
        if: secrets.NETLIFY_AUTH_TOKEN && secrets.NETLIFY_SITE_ID
        run: |
          echo "üåä Deploying to Netlify..."
          npx netlify-cli deploy --prod --auth ${{ secrets.NETLIFY_AUTH_TOKEN }} --site ${{ secrets.NETLIFY_SITE_ID }} --dir deployment
          echo "‚úÖ Netlify deployment completed"
      
      - name: üìä Post-Deployment Health Check
        run: |
          echo "üìä Running post-deployment health checks..."
          
          # Wait for deployment to be available
          sleep 30
          
          # Basic health check
          HEALTH_CHECK_URL="${{ secrets.HEALTH_CHECK_URL || 'https://webqx.org/health' }}"
          
          if curl -f -s "$HEALTH_CHECK_URL" > /dev/null; then
            echo "‚úÖ Health check passed - Application is responding"
          else
            echo "‚ö†Ô∏è  Health check failed - Application may not be fully ready"
          fi

  notify:
    name: üì¢ Deployment Notifications
    runs-on: ubuntu-latest
    needs: [setup-and-validate, test-suite, build-and-prepare, deploy-production]
    if: always()
    
    steps:
      - name: üîî Determine Deployment Status
        id: status
        run: |
          if [ "${{ needs.deploy-production.result }}" = "success" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=‚úÖ WebQx Healthcare Platform deployed successfully to production!" >> $GITHUB_OUTPUT
            echo "color=good" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=‚ùå WebQx Healthcare Platform deployment failed!" >> $GITHUB_OUTPUT
            echo "color=danger" >> $GITHUB_OUTPUT
          fi
      
      - name: üìß Send Email Notification
        if: secrets.SMTP_HOST && secrets.NOTIFICATION_EMAIL
        run: |
          echo "üìß Sending email notification..."
          # Use a simple curl command to send email via SMTP API or service
          # This is a placeholder - implement based on your email service
          echo "Email notification would be sent to: ${{ secrets.NOTIFICATION_EMAIL }}"
      
      - name: üí¨ Send Slack Notification
        if: secrets.SLACK_WEBHOOK_URL
        run: |
          echo "üí¨ Sending Slack notification..."
          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"attachments\": [{
                \"color\": \"${{ steps.status.outputs.color }}\",
                \"fields\": [{
                  \"title\": \"WebQx Healthcare Platform Deployment\",
                  \"value\": \"${{ steps.status.outputs.message }}\",
                  \"short\": false
                }, {
                  \"title\": \"Environment\",
                  \"value\": \"${{ needs.setup-and-validate.outputs.deployment-env }}\",
                  \"short\": true
                }, {
                  \"title\": \"Branch\",
                  \"value\": \"${{ github.ref_name }}\",
                  \"short\": true
                }, {
                  \"title\": \"Commit\",
                  \"value\": \"<https://github.com/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>\",
                  \"short\": true
                }, {
                  \"title\": \"Triggered by\",
                  \"value\": \"${{ github.actor }}\",
                  \"short\": true
                }],
                \"footer\": \"WebQx Healthcare Platform\",
                \"ts\": $(date +%s)
              }]
            }" \
            ${{ secrets.SLACK_WEBHOOK_URL }}
      
      - name: üìä Deployment Summary
        run: |
          echo "## üìä Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ needs.setup-and-validate.outputs.deployment-env }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ steps.status.outputs.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow**: ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîó Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "- [üåê Production Site](https://webqx.org)" >> $GITHUB_STEP_SUMMARY
          echo "- [üìä Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "- [üìù Commit Details](https://github.com/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY