name: WebQX CI & Deployment

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  pages: write
  id-token: write

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAMESPACE: ${{ github.repository_owner }}
  WEBQX_VERSION: ${{ github.sha }}

jobs:
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - name: Install Dependencies
        run: npm ci
      - name: Run Tests
        run: npm test -- --ci --reporters=default --reporters=jest-junit
      - name: Upload Test Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: junit.xml
          if-no-files-found: ignore

  build-docker:
    name: Build & Publish Docker Images
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract Metadata (EMR)
        id: meta_emr
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ env.IMAGE_NAMESPACE }}/webqx-emr
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha
      - name: Extract Metadata (Auth)
        id: meta_auth
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ env.IMAGE_NAMESPACE }}/webqx-auth
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha
      - name: Build & Push EMR Image
        uses: docker/build-push-action@v6
        with:
          context: webqx-emr-system
          file: webqx-emr-system/Dockerfile
          push: true
          tags: ${{ steps.meta_emr.outputs.tags }}
          labels: ${{ steps.meta_emr.outputs.labels }}
      - name: Build & Push Django Auth Image
        uses: docker/build-push-action@v6
        with:
          context: django-auth-backend
          push: true
          tags: ${{ steps.meta_auth.outputs.tags }}
          labels: ${{ steps.meta_auth.outputs.labels }}

  pages-build:
    name: Build Static Pages (Unified)
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - name: Cache Portal Node Modules
        uses: actions/cache@v4
        with:
          path: |
            portal/node_modules
            patient-portal/node_modules
          key: ${{ runner.os }}-portal-${{ hashFiles('package-lock.json', 'portal/package.json', 'patient-portal/package.json') }}
          restore-keys: |
            ${{ runner.os }}-portal-
      - name: Install Dependencies
        run: npm ci
      - name: Build Static Assets & Apps
        run: |
          set -e
          echo "== Tailwind/CSS =="
          npm run build:css:prod
          echo "== Legacy static pages script (if present) =="
          if [ -f scripts/build-pages.js ]; then npm run build:pages; fi
          echo "== Patient Portal Build (Parcel) =="
          if [ -d patient-portal ]; then \
            pushd patient-portal; npm ci || npm install; npm run build; popd; \
          else echo "patient-portal directory missing"; fi
          echo "== Vite Portal Build (if portal dir exists) =="
          if [ -d portal ]; then \
            npm run portal:build || echo "portal:build script missing"; \
          fi
      - name: Assemble Dist Artifact
        run: |
          set -e
          rm -rf dist && mkdir -p dist
          # Root & shared
          cp -f index.html dist/ 2>/dev/null || true
          cp -f index-github-pages.html dist/ 2>/dev/null || true
          cp -f sw.js webqx-remote-config.js dist/ 2>/dev/null || true
          [ -d assets ] && cp -r assets dist/
          [ -d integrations ] && cp -r integrations dist/
          # Existing static sections
          for d in provider patient-portal admin-console auth modules demo telehealth; do
            [ -d "$d" ] && cp -r "$d" dist/ || true;
          done
          # Patient portal (parcel output)
          if [ -d patient-portal/dist ]; then \
            mkdir -p dist/patient-portal; cp -r patient-portal/dist/* dist/patient-portal/; \
          fi
          # Vite portal output (assume portal/dist)
          if [ -d portal/dist ]; then \
            mkdir -p dist/portal; cp -r portal/dist/* dist/portal/; \
          fi
          # Legacy public/portal fallback (before config change)
          if [ -d public/portal ] && [ ! -d portal/dist ]; then \
            mkdir -p dist/portal; cp -r public/portal/* dist/portal/; \
          fi
          # Stamp commit for cache busting
          echo "<!-- build-sha: ${GITHUB_SHA} -->" >> dist/index.html 2>/dev/null || true
      - name: List Dist Contents
        run: |
          echo "=== dist tree (first 200 files) ==="; find dist -maxdepth 4 -type f | head -n 200
          echo "=== portal directory listing ==="; (cd dist/portal 2>/dev/null && find . -maxdepth 3 -type f | head -n 60 || echo 'no portal assets')
      - name: Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist

  deploy-pages:
    name: Deploy GitHub Pages
    runs-on: ubuntu-latest
    needs: pages-build
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to Pages
        id: deployment
        uses: actions/deploy-pages@v4

  summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [build-docker, deploy-pages]
    steps:
      - name: Summary
        run: |
          echo 'CI & Deployment complete.'
          echo 'Images and Pages deployed.'
