name: Deploy WebQX Healthcare Platform to AWS

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      deployment_method:
        description: 'Deployment method'
        required: true
        default: 'serverless'
        type: choice
        options:
          - serverless
          - sam
          - terraform

env:
  AWS_REGION: us-east-1
  NODE_VERSION: '18'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      deployment-method: ${{ steps.set-method.outputs.method }}
    steps:
      - name: Set Environment
        id: set-env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi

      - name: Set Deployment Method
        id: set-method
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "method=${{ github.event.inputs.deployment_method }}" >> $GITHUB_OUTPUT
          else
            echo "method=serverless" >> $GITHUB_OUTPUT
          fi

  test:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Run type checking
        run: npm run type-check

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            coverage/
            test-results.xml

  security-scan:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          languages: javascript

  build:
    runs-on: ubuntu-latest
    needs: [setup, test, security-scan]
    environment: ${{ needs.setup.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --production

      - name: Build Lambda functions
        run: |
          mkdir -p dist/aws
          cp -r aws/ dist/aws/
          cp serverless.yml dist/
          cp template.yaml dist/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/

  deploy-serverless:
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: needs.setup.outputs.deployment-method == 'serverless'
    environment: ${{ needs.setup.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Serverless Framework
        run: npm install -g serverless

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Serverless plugins
        run: |
          cd dist
          npm install serverless-webpack serverless-dynamodb-local serverless-offline

      - name: Deploy with Serverless Framework
        run: |
          cd dist
          serverless deploy --stage ${{ needs.setup.outputs.environment }} --region ${{ env.AWS_REGION }}
        env:
          SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}

      - name: Run health check
        run: |
          sleep 30
          HEALTH_URL=$(cd dist && serverless info --stage ${{ needs.setup.outputs.environment }} | grep ServiceEndpoint | awk '{print $2}')/health
          curl -f $HEALTH_URL || exit 1

  deploy-sam:
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: needs.setup.outputs.deployment-method == 'sam'
    environment: ${{ needs.setup.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install AWS SAM CLI
        run: |
          pip install aws-sam-cli

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Build SAM application
        run: |
          cd dist
          sam build

      - name: Deploy SAM application
        run: |
          cd dist
          sam deploy \
            --stack-name webqx-healthcare-sam-${{ needs.setup.outputs.environment }} \
            --s3-bucket webqx-sam-deployment-bucket-${{ needs.setup.outputs.environment }} \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --parameter-overrides \
              Stage=${{ needs.setup.outputs.environment }} \
              VpcId=${{ secrets.VPC_ID }} \
              PrivateSubnetIds="${{ secrets.PRIVATE_SUBNET_IDS }}" \
            --no-confirm-changeset

  deploy-terraform:
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: needs.setup.outputs.deployment-method == 'terraform'
    environment: ${{ needs.setup.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan \
            -var="environment=${{ needs.setup.outputs.environment }}" \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -var="database_password=${{ secrets.DATABASE_PASSWORD }}" \
            -var="jwt_secret=${{ secrets.JWT_SECRET }}" \
            -var="encryption_key=${{ secrets.ENCRYPTION_KEY }}" \
            -var="whisper_api_key=${{ secrets.WHISPER_API_KEY }}" \
            -out=tfplan

      - name: Terraform Apply
        if: github.event_name != 'pull_request'
        run: |
          cd terraform
          terraform apply -auto-approve tfplan

      - name: Output Terraform values
        if: github.event_name != 'pull_request'
        run: |
          cd terraform
          terraform output

  integration-tests:
    runs-on: ubuntu-latest
    needs: [setup, deploy-serverless, deploy-sam, deploy-terraform]
    if: always() && (needs.deploy-serverless.result == 'success' || needs.deploy-sam.result == 'success' || needs.deploy-terraform.result == 'success')
    environment: ${{ needs.setup.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Run integration tests
        run: |
          # Health check
          API_URL="${{ secrets.API_GATEWAY_URL }}"
          if [ -z "$API_URL" ]; then
            echo "API_URL not set, skipping integration tests"
            exit 0
          fi
          
          echo "Testing health endpoint..."
          curl -f "$API_URL/health" || exit 1
          
          echo "Testing FHIR metadata endpoint..."
          curl -f "$API_URL/fhir/metadata" || exit 1
          
          echo "Integration tests passed!"

  notify:
    runs-on: ubuntu-latest
    needs: [setup, deploy-serverless, deploy-sam, deploy-terraform, integration-tests]
    if: always()
    steps:
      - name: Determine deployment status
        id: status
        run: |
          if [ "${{ needs.deploy-serverless.result }}" = "success" ] || [ "${{ needs.deploy-sam.result }}" = "success" ] || [ "${{ needs.deploy-terraform.result }}" = "success" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=✅ WebQX Healthcare Platform deployed successfully to ${{ needs.setup.outputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=❌ WebQX Healthcare Platform deployment failed for ${{ needs.setup.outputs.environment }}" >> $GITHUB_OUTPUT
          fi

      - name: Create deployment status
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment?.id || 0,
              state: '${{ steps.status.outputs.status }}',
              description: '${{ steps.status.outputs.message }}',
              environment: '${{ needs.setup.outputs.environment }}'
            });

      # Optional: Send Slack notification
      # - name: Send Slack notification
      #   if: always() && secrets.SLACK_WEBHOOK_URL
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: ${{ steps.status.outputs.status }}
      #     text: ${{ steps.status.outputs.message }}
      #     webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

  cleanup:
    runs-on: ubuntu-latest
    needs: [setup, integration-tests]
    if: always() && needs.setup.outputs.environment == 'dev' && github.event_name == 'pull_request'
    environment: ${{ needs.setup.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Cleanup dev resources (PR only)
        run: |
          echo "Cleaning up development resources for PR..."
          # Add cleanup commands here if needed for cost optimization
          # Example: serverless remove --stage dev-pr-${{ github.event.number }}