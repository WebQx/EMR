# WebQX Healthcare Platform - Staging Deployment
# Automatically deploys to staging environment after successful CI

name: Deploy to Staging

on:
  push:
    branches: [ develop ]
  workflow_run:
    workflows: ["CI - Test & Build"]
    types:
      - completed
    branches: [ develop ]

env:
  NODE_VERSION: '18'
  DEPLOYMENT_ENV: 'staging'

jobs:
  # Pre-deployment checks
  pre-deployment:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'push' }}
    
    outputs:
      deployment-id: ${{ steps.deployment.outputs.deployment_id }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create deployment
      id: deployment
      uses: actions/github-script@v7
      with:
        script: |
          const deployment = await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            environment: 'staging',
            description: 'Staging deployment',
            auto_merge: false,
            required_contexts: []
          });
          core.setOutput('deployment_id', deployment.data.id);
          return deployment.data.id;

  # Build and prepare for deployment
  build-for-staging:
    name: Build for Staging
    runs-on: ubuntu-latest
    needs: pre-deployment
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: |
        if npm run build --silent 2>/dev/null; then
          npm run build
        else
          echo "No build script found, using source files directly"
        fi
      env:
        NODE_ENV: production
        
    - name: Create version file
      run: |
        echo "BUILD_VERSION=${GITHUB_SHA:0:7}" > version.txt
        echo "BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> version.txt
        echo "BUILD_BRANCH=${GITHUB_REF#refs/heads/}" >> version.txt
        echo "DEPLOYMENT_ENV=staging" >> version.txt
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: staging-build-${{ github.sha }}
        path: |
          .
          !node_modules
          !.git
        retention-days: 7

  # Deploy to Railway (staging)
  deploy-railway-staging:
    name: Deploy to Railway Staging
    runs-on: ubuntu-latest
    needs: [pre-deployment, build-for-staging]
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: staging-build-${{ github.sha }}
        
    - name: Deploy to Railway
      run: |
        # Install Railway CLI
        curl -fsSL https://railway.app/install.sh | sh
        export PATH=$PATH:$HOME/.railway/bin
        
        # Deploy to staging service
        railway login --token ${{ secrets.RAILWAY_TOKEN }}
        railway link ${{ secrets.RAILWAY_STAGING_PROJECT_ID }}
        
        # Set environment variables for staging
        railway vars set NODE_ENV=staging
        railway vars set DEPLOYMENT_ENV=staging
        railway vars set BUILD_VERSION="${GITHUB_SHA:0:7}"
        
        # Deploy
        railway up --detach
        
        # Wait for deployment to complete
        sleep 60
        
        # Get deployment URL
        STAGING_URL=$(railway status --json | jq -r '.deployments[0].url')
        echo "STAGING_URL=$STAGING_URL" >> $GITHUB_ENV
        
    - name: Health check staging deployment
      run: |
        echo "Checking staging deployment health..."
        max_attempts=30
        attempt=1
        
        while [ $attempt -le $max_attempts ]; do
          if curl -f --max-time 10 "$STAGING_URL/health" || curl -f --max-time 10 "$STAGING_URL/"; then
            echo "✅ Staging deployment is healthy!"
            break
          fi
          
          if [ $attempt -eq $max_attempts ]; then
            echo "❌ Staging deployment health check failed after $max_attempts attempts"
            exit 1
          fi
          
          echo "Attempt $attempt/$max_attempts failed, retrying in 10 seconds..."
          sleep 10
          attempt=$((attempt + 1))
        done
        
    - name: Run staging smoke tests
      run: |
        echo "Running staging smoke tests..."
        
        # Test main endpoints
        curl -f "$STAGING_URL/health" || echo "Health endpoint failed"
        curl -f "$STAGING_URL/" || echo "Root endpoint failed" 
        
        # Test API endpoints if they exist
        if curl -f "$STAGING_URL/api/health" 2>/dev/null; then
          echo "✅ API health check passed"
        fi
        
        # Test patient portal if accessible
        if curl -f "$STAGING_URL/patient-portal" 2>/dev/null; then
          echo "✅ Patient portal accessible"
        fi
        
        echo "Staging smoke tests completed"

  # Update deployment status
  deployment-status:
    name: Update Deployment Status
    runs-on: ubuntu-latest
    needs: [pre-deployment, deploy-railway-staging]
    if: always()
    
    steps:
    - name: Update deployment status
      uses: actions/github-script@v7
      with:
        script: |
          const deploymentId = '${{ needs.pre-deployment.outputs.deployment-id }}';
          const success = '${{ needs.deploy-railway-staging.result }}' === 'success';
          
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: deploymentId,
            state: success ? 'success' : 'failure',
            description: success ? 'Staging deployment successful' : 'Staging deployment failed',
            environment_url: success ? process.env.STAGING_URL : undefined
          });

  # Backup and versioning
  backup-staging:
    name: Create Staging Backup
    runs-on: ubuntu-latest
    needs: deploy-railway-staging
    if: success()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create backup metadata
      run: |
        mkdir -p backups/staging
        
        cat > backups/staging/backup-${{ github.sha }}.json << EOF
        {
          "version": "${GITHUB_SHA:0:7}",
          "environment": "staging",
          "deployment_time": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "branch": "${GITHUB_REF#refs/heads/}",
          "commit_message": "${{ github.event.head_commit.message }}",
          "deployer": "${{ github.actor }}",
          "workflow_run_id": "${{ github.run_id }}",
          "artifacts": {
            "build_artifact": "staging-build-${{ github.sha }}",
            "source_commit": "${{ github.sha }}"
          }
        }
        EOF
        
    - name: Upload backup metadata
      uses: actions/upload-artifact@v4
      with:
        name: staging-backup-${{ github.sha }}
        path: backups/
        retention-days: 30

  # Notify teams
  notify-staging-deployment:
    name: Notify Staging Deployment
    runs-on: ubuntu-latest
    needs: [deploy-railway-staging, deployment-status]
    if: always()
    
    steps:
    - name: Notify Slack
      if: success() && vars.SLACK_WEBHOOK_URL
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            "text": "🏥 WebQX Healthcare Platform - Staging Deployment",
            "attachments": [
              {
                "color": "good",
                "fields": [
                  {
                    "title": "Environment",
                    "value": "Staging",
                    "short": true
                  },
                  {
                    "title": "Version",
                    "value": "${{ github.sha }}".substring(0, 7),
                    "short": true
                  },
                  {
                    "title": "Branch",
                    "value": "${{ github.ref_name }}",
                    "short": true
                  },
                  {
                    "title": "Deployer",
                    "value": "${{ github.actor }}",
                    "short": true
                  },
                  {
                    "title": "Status",
                    "value": "✅ Deployed Successfully",
                    "short": false
                  }
                ]
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Notify on failure
      if: failure() && vars.SLACK_WEBHOOK_URL
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            "text": "🚨 WebQX Healthcare Platform - Staging Deployment Failed",
            "attachments": [
              {
                "color": "danger",
                "fields": [
                  {
                    "title": "Environment",
                    "value": "Staging",
                    "short": true
                  },
                  {
                    "title": "Version",
                    "value": "${{ github.sha }}".substring(0, 7),
                    "short": true
                  },
                  {
                    "title": "Branch",
                    "value": "${{ github.ref_name }}",
                    "short": true
                  },
                  {
                    "title": "Status",
                    "value": "❌ Deployment Failed",
                    "short": false
                  },
                  {
                    "title": "Action Required",
                    "value": "Please check the workflow logs and fix the issues",
                    "short": false
                  }
                ]
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}